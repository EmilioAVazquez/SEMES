{
  "openapi": "3.0.1",
  "info": {
    "title": "ToDo API",
    "description": "A simple example ASP.NET Core Web API",
    "termsOfService": "https://example.com/terms",
    "contact": {
      "name": "Shayne Boyer",
      "url": "https://twitter.com/spboyer",
      "email": ""
    },
    "license": {
      "name": "Use under LICX",
      "url": "https://example.com/license"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Admi/{id}": {
      "get": {
        "tags": [
          "Admi"
        ],
        "summary": "Gets a Admi entity by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Admi"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Admi"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Admi"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Admi"
        ],
        "summary": "Deletes a Admi entity by its id. Valid employeeId required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Admi": {
      "put": {
        "tags": [
          "Admi"
        ],
        "summary": "Adds a new Admi entity with dummy id and returns same Admi enity BUT with \r\nupdated id.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Admi"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Admi"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Admi"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Admi"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Admi"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Admi"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Admi"
        ],
        "summary": "Updates a given Admi entity. Valid admiId required.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Admi"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Admi"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Admi"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Client/{id}": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Gets a Client entity by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Client"
        ],
        "summary": "Deletes a Client entity by its id. Valid clientId required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Client/clients/{key}": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Gets a List of possible Clients by phone number string or a firstName_Lastname string",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Client/employee/{id}": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Gets a list of the most frequently used products by Employee.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Client": {
      "put": {
        "tags": [
          "Client"
        ],
        "summary": "Adds a new Client entity with dummy id and returns same Client enity BUT with \r\nupdated id.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Client"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Client"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Client"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Updates a given Client entity. Valid clientId required.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Client"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Client"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Client"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Employee/{id}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Gets a Employee entity by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employee"
        ],
        "summary": "Deletes a Admi entity by its id. Valid employeeId required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Employee": {
      "put": {
        "tags": [
          "Employee"
        ],
        "summary": "Adds a Employee entity by its id.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Updates a given Employee entity. Valid employeeId required.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Item/{id}": {
      "get": {
        "tags": [
          "Item"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Gets a Product entity by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Deletes a Product entity by its id. Valid productId required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Product/products/{key}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Gets a list of 10 possible Product entities given a key.\r\nFor instance key = \"aple\", will return a list of product\r\nwith names similar to \"aple\" like \"apple\"",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/employee/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Gets a list of the most frequently used products by Employee.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Product": {
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Adds a new Product entity with dummy id and returns same Product enity BUT with \r\nupdated id.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Updates a given Product entity. Valid productId required.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Supplier/{id}": {
      "get": {
        "tags": [
          "Supplier"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Supplier"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Supplier"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Supplier"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Supplier"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Supplier": {
      "put": {
        "tags": [
          "Supplier"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Supplier"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Supplier"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Supplier"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "Supplier"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Supplier"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Supplier"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Supplier"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Transaction/employee/{employeeId}": {
      "get": {
        "tags": [
          "Transaction"
        ],
        "summary": "Gets a Transaction List of the latest transaction performed by a employee given its id.",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Transaction/{id}": {
      "get": {
        "tags": [
          "Transaction"
        ],
        "summary": "Gets a TransactionAction entity by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Transaction"
        ],
        "summary": "Deletes a Transaction, and associated Items, entity by its id. Valid transactionId required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Transaction": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Updates a given Transaction entity. Valid transactionId required.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transaction"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Transaction"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Transaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "Transaction"
        ],
        "summary": "Adds a new TransactionAction entity with Items and Transactions dummy ids, and returns same Transaction enity BUT with \r\nupdated id.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionAction"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionAction"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          }
        }
      }
    },
    "/api/Transaction/{employeeId}/{k}": {
      "get": {
        "tags": [
          "Transaction"
        ],
        "parameters": [
          {
            "name": "k",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          }
        }
      }
    },
    "/api/Wearhouse/{id}": {
      "get": {
        "tags": [
          "Wearhouse"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Wearhouse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wearhouse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wearhouse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Wearhouse"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Wearhouse": {
      "put": {
        "tags": [
          "Wearhouse"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Wearhouse"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Wearhouse"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Wearhouse"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "Wearhouse"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Wearhouse"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Wearhouse"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Wearhouse"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherForecast"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherForecast"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Admi": {
        "required": [
          "admiId",
          "email",
          "firstName",
          "lastName",
          "phoneNumber"
        ],
        "type": "object",
        "properties": {
          "admiId": {
            "type": "string",
            "example": "57f0f150-ca0c-4c54-9f40-27cc6bf5fd10"
          },
          "firstName": {
            "type": "string",
            "description": "First Name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name",
            "example": "Lorca"
          },
          "phoneNumber": {
            "type": "integer",
            "description": "Phone number in integer with no special characters.\r\nLeaving space with 0 for special code.",
            "format": "int64",
            "example": 14442119013
          },
          "email": {
            "type": "string",
            "example": "somthing@something.com"
          },
          "address": {
            "type": "string",
            "description": "Address given by a geolocation string",
            "nullable": true,
            "example": "{lat: -34, lng: 151}"
          }
        },
        "additionalProperties": false,
        "description": "Admi Entity"
      },
      "Client": {
        "required": [
          "clientId",
          "email",
          "firstName",
          "lastName",
          "phoneNumber"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "example": "57f0f150-ca0c-4c54-9f40-27cc6bf5fd10"
          },
          "firstName": {
            "type": "string",
            "description": "First Name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name",
            "example": "Lorca"
          },
          "phoneNumber": {
            "type": "integer",
            "description": "Phone number in integer with no special characters.\r\nLeaving space with 0 for special code.",
            "format": "int64",
            "example": 14442119013
          },
          "email": {
            "type": "string",
            "example": "somthing@something.com"
          },
          "address": {
            "type": "string",
            "description": "Address given by a geolocation string",
            "nullable": true,
            "example": "{lat: -34, lng: 151}"
          }
        },
        "additionalProperties": false,
        "description": "Client Entity"
      },
      "Employee": {
        "required": [
          "email",
          "employeeId",
          "firstName",
          "lastName",
          "phoneNumber"
        ],
        "type": "object",
        "properties": {
          "employeeId": {
            "type": "string",
            "example": "57f0f150-ca0c-4c54-9f40-27cc6bf5fd10"
          },
          "firstName": {
            "type": "string",
            "description": "First Name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name",
            "example": "Lorca"
          },
          "phoneNumber": {
            "type": "integer",
            "description": "Phone number in integer with no special characters.\r\nLeaving space with 0 for special code.",
            "format": "int64",
            "example": 14442119013
          },
          "email": {
            "type": "string",
            "example": "somthing@something.com"
          },
          "address": {
            "type": "string",
            "description": "Address given by a geolocation string",
            "nullable": true,
            "example": "{lat: -34, lng: 151}"
          }
        },
        "additionalProperties": false,
        "description": "Employee Entity"
      },
      "Item": {
        "required": [
          "itemId",
          "productId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string",
            "example": "57f0f150-ca0c-4c54-9f40-27cc6bf5fd10"
          },
          "productId": {
            "type": "string",
            "description": "Product Associated with Transaction.",
            "example": "57f0f150-ca0c-4c54-9f40-27cc6bf5fd10"
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction asociated with this item.",
            "nullable": true,
            "example": "57f0f150-ca0c-4c54-9f40-27cc6bf5fd10"
          },
          "dateAdded": {
            "type": "string",
            "description": "Added in the backend.",
            "format": "date-time",
            "example": "2020-12-01T00:00:00.0000000"
          },
          "wearehouseId": {
            "type": "integer",
            "description": "Wearhouse associated with this transaction.",
            "format": "int32"
          },
          "quantity": {
            "type": "number",
            "description": "Number or quantity of a given product.This in the unit of the \r\nproduct itself.",
            "format": "double",
            "example": 2
          }
        },
        "additionalProperties": false,
        "description": "Item Entity"
      },
      "Product": {
        "required": [
          "name",
          "price",
          "productId",
          "unit"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "example": "57f0f150-ca0c-4c54-9f40-27cc6bf5fd10"
          },
          "name": {
            "type": "string",
            "example": "Water"
          },
          "summary": {
            "type": "string",
            "nullable": true,
            "example": "Water bonafon inported. 0 sodium. 0% clorine"
          },
          "price": {
            "type": "number",
            "description": "This is on the wearhouse currency like dollar, or equatorian peso.",
            "format": "double",
            "example": 12
          },
          "unit": {
            "type": "string",
            "description": "Units that the price is made on. Like L, kg, package, etc.",
            "example": "mL"
          }
        },
        "additionalProperties": false,
        "description": "Product Entity"
      },
      "Supplier": {
        "required": [
          "email",
          "firstName",
          "lastName",
          "phoneNumber",
          "supplierId"
        ],
        "type": "object",
        "properties": {
          "supplierId": {
            "type": "string",
            "example": "57f0f150-ca0c-4c54-9f40-27cc6bf5fd10"
          },
          "firstName": {
            "type": "string",
            "description": "First Name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name",
            "example": "Lorca"
          },
          "phoneNumber": {
            "type": "integer",
            "description": "Phone number in integer with no special characters.\r\nLeaving space with 0 for special code.",
            "format": "int64",
            "example": 14442119013
          },
          "email": {
            "type": "string",
            "example": "somthing@something.com"
          },
          "address": {
            "type": "string",
            "description": "Address given by a geolocation string",
            "nullable": true,
            "example": "{lat: -34, lng: 151}"
          }
        },
        "additionalProperties": false,
        "description": "Supplier Entity"
      },
      "Transaction": {
        "required": [
          "date",
          "employeeId",
          "total",
          "transactionId",
          "verified"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "example": "57f0f150-ca0c-4c54-9f40-27cc6bf5fd10"
          },
          "date": {
            "type": "string",
            "description": "Date and time when this transaction finished. Can be dummy for creation.",
            "format": "date-time",
            "example": "2017-02-21T00:00:00.0000000"
          },
          "location": {
            "type": "string",
            "description": "Coordinate of where each transaction took place.",
            "nullable": true,
            "example": "{lat: -34, lng: 151}"
          },
          "employeeId": {
            "type": "string",
            "description": "Id of the employee who made this transaction.",
            "example": "57f0f150-ca0c-4c54-9f40-27cc6bf5fd10"
          },
          "verified": {
            "type": "boolean",
            "description": "Has this transaction been verified by admi.",
            "example": true
          },
          "clientId": {
            "type": "string",
            "description": "Id the of the client beins sold to.",
            "nullable": true,
            "example": "57f0f150-ca0c-4c54-9f40-27cc6bf5fd10"
          },
          "total": {
            "type": "number",
            "description": "The total of the items selected.This will be computed in the back end.!--\r\nCan be dummy when creating.",
            "format": "double",
            "example": 350.12
          }
        },
        "additionalProperties": false,
        "description": "Transaction Entity"
      },
      "TransactionAction": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "List of Items associated with the given Transaction",
            "nullable": true
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          }
        },
        "additionalProperties": false,
        "description": "TransactionAction Entity"
      },
      "Wearhouse": {
        "required": [
          "name",
          "wearhouseId"
        ],
        "type": "object",
        "properties": {
          "wearhouseId": {
            "type": "string",
            "example": "57f0f150-ca0c-4c54-9f40-27cc6bf5fd10"
          },
          "name": {
            "type": "string",
            "example": "La otra vaina"
          },
          "address": {
            "type": "string",
            "description": "Address given by a geolocation string",
            "nullable": true,
            "example": "{lat: -34, lng: 151}"
          }
        },
        "additionalProperties": false,
        "description": "Wearhouse Entity"
      },
      "WeatherForecast": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "temperatureC": {
            "type": "integer",
            "format": "int32"
          },
          "temperatureF": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}