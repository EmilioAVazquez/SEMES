// tslint:disable
/**
 * ToDo API
 * A simple example ASP.NET Core Web API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    Transaction,
    TransactionAction,
} from '../models';

export interface ApiTransactionEmployeeEmployeeIdGetRequest {
    employeeId: string | null;
}

export interface ApiTransactionEmployeeIdKGetRequest {
    k: number;
    employeeId: string | null;
}

export interface ApiTransactionIdDeleteRequest {
    id: string | null;
}

export interface ApiTransactionIdGetRequest {
    id: string | null;
}

export interface ApiTransactionPostRequest {
    transaction?: Transaction;
}

export interface ApiTransactionPutRequest {
    transactionAction?: TransactionAction;
}

/**
 * no description
 */
export class TransactionApi extends BaseAPI {

    /**
     * Gets a Transaction List of the latest transaction performed by a employee given its id.
     */
    apiTransactionEmployeeEmployeeIdGet = ({ employeeId }: ApiTransactionEmployeeEmployeeIdGetRequest): Observable<Array<Transaction>> => {
        throwIfNullOrUndefined(employeeId, 'apiTransactionEmployeeEmployeeIdGet');

        return this.request<Array<Transaction>>({
            path: '/api/Transaction/employee/{employeeId}'.replace('{employeeId}', encodeURI(employeeId)),
            method: 'GET',
        });
    };

    /**
     */
    apiTransactionEmployeeIdKGet = ({ k, employeeId }: ApiTransactionEmployeeIdKGetRequest): Observable<Transaction> => {
        throwIfNullOrUndefined(k, 'apiTransactionEmployeeIdKGet');
        throwIfNullOrUndefined(employeeId, 'apiTransactionEmployeeIdKGet');

        return this.request<Transaction>({
            path: '/api/Transaction/{employeeId}/{k}'.replace('{k}', encodeURI(k)).replace('{employeeId}', encodeURI(employeeId)),
            method: 'GET',
        });
    };

    /**
     * Deletes a Transaction, and associated Items, entity by its id. Valid transactionId required.
     */
    apiTransactionIdDelete = ({ id }: ApiTransactionIdDeleteRequest): Observable<void> => {
        throwIfNullOrUndefined(id, 'apiTransactionIdDelete');

        return this.request<void>({
            path: '/api/Transaction/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
        });
    };

    /**
     * Gets a TransactionAction entity by its id.
     */
    apiTransactionIdGet = ({ id }: ApiTransactionIdGetRequest): Observable<Transaction> => {
        throwIfNullOrUndefined(id, 'apiTransactionIdGet');

        return this.request<Transaction>({
            path: '/api/Transaction/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        });
    };

    /**
     * Updates a given Transaction entity. Valid transactionId required.
     */
    apiTransactionPost = ({ transaction }: ApiTransactionPostRequest): Observable<void> => {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            path: '/api/Transaction',
            method: 'POST',
            headers,
            body: transaction,
        });
    };

    /**
     * Adds a new TransactionAction entity with Items and Transactions dummy ids, and returns same Transaction enity BUT with   updated id.
     */
    apiTransactionPut = ({ transactionAction }: ApiTransactionPutRequest): Observable<Transaction> => {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<Transaction>({
            path: '/api/Transaction',
            method: 'PUT',
            headers,
            body: transactionAction,
        });
    };

}
