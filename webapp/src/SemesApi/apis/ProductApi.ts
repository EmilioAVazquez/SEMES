// tslint:disable
/**
 * ToDo API
 * A simple example ASP.NET Core Web API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    Product,
} from '../models';

export interface ApiProductEmployeeIdGetRequest {
    id: string | null;
}

export interface ApiProductIdDeleteRequest {
    id: string | null;
}

export interface ApiProductIdGetRequest {
    id: string | null;
}

export interface ApiProductPostRequest {
    product?: Product;
}

export interface ApiProductProductsKeyGetRequest {
    key: string | null;
}

export interface ApiProductPutRequest {
    product?: Product;
}

/**
 * no description
 */
export class ProductApi extends BaseAPI {

    /**
     * Gets a list of the most frequently used products by Employee.
     */
    apiProductEmployeeIdGet = ({ id }: ApiProductEmployeeIdGetRequest): Observable<Array<Product>> => {
        throwIfNullOrUndefined(id, 'apiProductEmployeeIdGet');

        return this.request<Array<Product>>({
            path: '/api/Product/employee/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        });
    };

    /**
     * Deletes a Product entity by its id. Valid productId required.
     */
    apiProductIdDelete = ({ id }: ApiProductIdDeleteRequest): Observable<void> => {
        throwIfNullOrUndefined(id, 'apiProductIdDelete');

        return this.request<void>({
            path: '/api/Product/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
        });
    };

    /**
     * Gets a Product entity by its id.
     */
    apiProductIdGet = ({ id }: ApiProductIdGetRequest): Observable<Product> => {
        throwIfNullOrUndefined(id, 'apiProductIdGet');

        return this.request<Product>({
            path: '/api/Product/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        });
    };

    /**
     * Updates a given Product entity. Valid productId required.
     */
    apiProductPost = ({ product }: ApiProductPostRequest): Observable<void> => {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            path: '/api/Product',
            method: 'POST',
            headers,
            body: product,
        });
    };

    /**
     * Gets a list of 10 possible Product entities given a key.  For instance key = \"aple\", will return a list of product  with names similar to \"aple\" like \"apple\"
     */
    apiProductProductsKeyGet = ({ key }: ApiProductProductsKeyGetRequest): Observable<Array<Product>> => {
        throwIfNullOrUndefined(key, 'apiProductProductsKeyGet');

        return this.request<Array<Product>>({
            path: '/api/Product/products/{key}'.replace('{key}', encodeURI(key)),
            method: 'GET',
        });
    };

    /**
     * Adds a new Product entity with dummy id and returns same Product enity BUT with   updated id.
     */
    apiProductPut = ({ product }: ApiProductPutRequest): Observable<Product> => {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<Product>({
            path: '/api/Product',
            method: 'PUT',
            headers,
            body: product,
        });
    };

}
